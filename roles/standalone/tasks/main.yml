---
# tasks file for all_in_one

# standalone params
- name: Create the standalone params
  template:
    src: "{{ standalone_config }}"
    dest: "{{ working_dir}}/standalone_parameters.yaml"
    mode: 0755

- name: Create container parameters script
  template:
    src: "{{ standalone_container_prep_script }}"
    dest: "{{ working_dir }}/standalone-container-prep.sh"
    mode: "0755"

- name: Run container prepare
  shell: >
    set -o pipefail &&
    {{ working_dir }}/standalone-container-prep.sh 2>&1 {{ timestamper_cmd }} > {{ working_dir }}/{{ standalone_container_prep_log }}

- name: Create the deploy command for standalone
  template:
    src: "{{ standalone_deploy_script }}"
    dest: "{{ working_dir}}/standalone.sh"
    mode: 0755

- name: Deploy the standalone
  shell: >
    set -o pipefail &&
    {{ working_dir }}/standalone.sh 2>&1 {{ timestamper_cmd }} > {{ working_dir }}/{{ standalone_deploy_log }}

- when: standalone_ansible_lint|default(false)|bool
  vars:
    quickstart_venv: "{{ lookup('env','OPT_WORKDIR') }}"
  block:
    - name: Install ansible-lint
      pip:
        name: ansible-lint
        state: latest
        virtualenv: "{{ quickstart_venv }}"

    - name: List playbooks
      shell: "find $(ls -rtd {{ working_dir }}/undercloud-ansible-* | tail -1)/ -name '*playbook*.yaml'"
      register: playbooks

    # We ignore (for now) the lint (rc==2), only catch syntax error
    # (rc==1).
    - name: Lint playbooks
      shell: >
        source {{ quickstart_venv }}/bin/activate;
        exec 1>>{{ working_dir }}/{{standalone_ansible_lint_log}};
        exec 2>&1;
        echo LINTING {{item}};
        ansible-lint -v {{item}};
        rc=$?;
        echo DONE rc=$rc;
        exit $rc
      register: lint_result
      environment:
        ANSIBLE_LIBRARY: |
          /usr/share/ansible-modules/:{{lookup('env', 'ANSIBLE_LIBRARY')}}
      with_items: "{{ playbooks.stdout_lines }}"
      failed_when: lint_result.rc == 1
